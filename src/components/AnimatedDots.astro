---
// This component is purely for the background animation.
---

<div id="pixi-canvas-container" class="fixed inset-0 -z-10 pointer-events-none">
</div>

<script>
  import * as PIXI from "pixi.js";
  import { createNoise3D } from "simplex-noise";

  // Define a type for our point objects for better type safety.
  interface Point {
    x: number;
    y: number;
    opacity: number;
    particle: PIXI.Sprite;
  }

  const el = document.getElementById("pixi-canvas-container");

  if (el) {
    const SCALE = 200;
    const LENGTH = 5;
    const SPACING = 15;

    const noise3d = createNoise3D();
    const existingPoints = new Set<string>();
    const points: Point[] = [];

    let app: PIXI.Application;
    let container: PIXI.Container;
    let dotTexture: PIXI.Texture;

    async function setup() {
      app = new PIXI.Application();
      await app.init({
        backgroundAlpha: 0, // Transparent background
        antialias: true,
        resolution: window.devicePixelRatio,
        resizeTo: el!,
        autoDensity: true,
      });
      el!.appendChild(app.canvas);

      container = new PIXI.Container();
      app.stage.addChild(container);

      // Create a texture for the dots once.
      const g = new PIXI.Graphics().circle(0, 0, 1).fill(0x434b5c);
      dotTexture = app.renderer.generateTexture(g);

      addPoints();

      app.ticker.add(() => {
        const t = Date.now() / 10000;
        for (const p of points) {
          const { x, y, opacity, particle } = p;
          const rad = (noise3d(x / SCALE, y / SCALE, t) - 0.5) * 2 * Math.PI;
          const len = (noise3d(x / SCALE, y / SCALE, t * 2) + 0.5) * LENGTH;
          const nx = x + Math.cos(rad) * len;
          const ny = y + Math.sin(rad) * len;

          particle.x = nx;
          particle.y = ny;
          particle.alpha = (Math.abs(Math.cos(rad)) * 0.8 + 0.2) * opacity;
        }
      });

      window.addEventListener("resize", addPoints);
    }

    function addPoints() {
      // Get the current dimensions from the canvas element itself
      const w = window.innerWidth;
      const h = window.innerHeight;

      for (let x = -SPACING / 2; x < w + SPACING; x += SPACING) {
        for (let y = -SPACING / 2; y < h + SPACING; y += SPACING) {
          const id = `${x}-${y}`;
          if (existingPoints.has(id)) continue;
          existingPoints.add(id);

          const particle = new PIXI.Sprite(dotTexture);
          particle.anchor.set(0.5);
          container.addChild(particle);

          const opacity = Math.random() * 0.5 + 0.5;
          points.push({ x, y, opacity, particle });
        }
      }
    }

    // FIX: Use the 'load' event to ensure all styles are applied and the
    // container has its final size before the script runs.
    document.addEventListener("DOMContentLoaded", setup);
  }
</script>
